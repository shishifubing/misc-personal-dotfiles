From cfcb32c04fd71b8ece81fc49953729778770529d Mon Sep 17 00:00:00 2001
From: borinskikh <causelesscause@gmail.com>
Date: Mon, 19 Apr 2021 17:49:37 +0300
Subject: [PATCH] kinda works

---
 config.h |  67 +++++++++++++++++++++++++++++++++++++
 tabbed.c | 100 ++++++++++++++++++++++++++++++-------------------------
 2 files changed, 121 insertions(+), 46 deletions(-)
 create mode 100644 config.h

diff --git a/config.h b/config.h
new file mode 100644
index 0000000..78ee8a1
--- /dev/null
+++ b/config.h
@@ -0,0 +1,67 @@
+/* See LICENSE file for copyright and license details. */
+
+/* appearance */
+static const char font[]        = "monospace:size=10";
+static const char* normbgcolor  = "#000000";
+static const char* normfgcolor  = "#ffffff";
+static const char* selbgcolor   = "#9932cc";
+static const char* selfgcolor   = "#ffffff";
+static const char* urgbgcolor   = "#111111";
+static const char* urgfgcolor   = "#cc0000";
+static const char before[]      = "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<";
+static const char after[]       = ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
+static const char titletrim[]   = "";
+static const int  tabwidth      = 300;
+static const int  tabheight     = 30;
+static const Bool foreground    = True;
+static       Bool urgentswitch  = False;
+
+/*
+ * Where to place a new tab when it is opened. When npisrelative is True,
+ * then the current position is changed + newposition. If npisrelative
+ * is False, then newposition is an absolute position.
+ */
+static int  newposition   = 0;
+static Bool npisrelative  = False;
+
+#define SETPROP(p) { \
+        .v = (char *[]){ "/bin/sh", "-c", \
+                "prop=\"`xwininfo -children -id $1 | grep '^     0x' |" \
+                "sed -e's@^ *\\(0x[0-9a-f]*\\) \"\\([^\"]*\\)\".*@\\1 \\2@' |" \
+                "xargs -0 printf %b | dmenu -l 10 -w $1`\" &&" \
+                "xprop -id $1 -f $0 8s -set $0 \"$prop\"", \
+                p, winid, NULL \
+        } \
+}
+
+#define MODKEY ControlMask
+static Key keys[] = {
+	/* modifier             key        function     argument */
+	{ MODKEY|ShiftMask,     XK_Return, focusonce,   { 0 } },
+	{ MODKEY|ShiftMask,     XK_Return, spawn,       { 0 } },
+
+	{ MODKEY|ShiftMask,     XK_l,      rotate,      { .i = +1 } },
+	{ MODKEY|ShiftMask,     XK_h,      rotate,      { .i = -1 } },
+	{ MODKEY|ShiftMask,     XK_j,      movetab,     { .i = -1 } },
+	{ MODKEY|ShiftMask,     XK_k,      movetab,     { .i = +1 } },
+	{ MODKEY,               XK_Tab,    rotate,      { .i = 0 } },
+
+	{ MODKEY,               XK_grave,  spawn,       SETPROP("_TABBED_SELECT_TAB") },
+	{ MODKEY,               XK_1,      move,        { .i = 0 } },
+	{ MODKEY,               XK_2,      move,        { .i = 1 } },
+	{ MODKEY,               XK_3,      move,        { .i = 2 } },
+	{ MODKEY,               XK_4,      move,        { .i = 3 } },
+	{ MODKEY,               XK_5,      move,        { .i = 4 } },
+	{ MODKEY,               XK_6,      move,        { .i = 5 } },
+	{ MODKEY,               XK_7,      move,        { .i = 6 } },
+	{ MODKEY,               XK_8,      move,        { .i = 7 } },
+	{ MODKEY,               XK_9,      move,        { .i = 8 } },
+	{ MODKEY,               XK_0,      move,        { .i = 9 } },
+
+	{ MODKEY,               XK_q,      killclient,  { 0 } },
+
+	{ MODKEY,               XK_u,      focusurgent, { 0 } },
+	{ MODKEY|ShiftMask,     XK_u,      toggle,      { .v = (void*) &urgentswitch } },
+
+	{ 0,                    XK_F11,    fullscreen,  { 0 } },
+};
diff --git a/tabbed.c b/tabbed.c
index eafe28a..ec212c7 100644
--- a/tabbed.c
+++ b/tabbed.c
@@ -324,54 +324,64 @@ void
 drawbar(void)
 {
 	XftColor *col;
-	int c, cc, fc, width;
+	int c, cc, fc;
 	char *name = NULL;
 
+  dc.x = 0;
+  dc.y = 0;
+	dc.w = tabwidth;
+
 	if (nclients == 0) {
-		dc.x = 0;
-		dc.w = ww;
 		XFetchName(dpy, win, &name);
 		drawtext(name ? name : "", dc.norm);
-		XCopyArea(dpy, dc.drawable, win, dc.gc, 0, 0, ww, bh, 0, 0);
+		XCopyArea(dpy, dc.drawable, win, dc.gc, 0, 0, tabwidth, wh, 0, 0);
 		XSync(dpy, False);
 
 		return;
 	}
 
-	width = ww;
-	cc = ww / tabwidth;
-	if (nclients > cc)
-		cc = (ww - TEXTW(before) - TEXTW(after)) / tabwidth;
-
-	if ((fc = getfirsttab()) + cc < nclients) {
-		dc.w = TEXTW(after);
-		dc.x = width - dc.w;
-		drawtext(after, dc.sel);
-		width -= dc.w;
-	}
-	dc.x = 0;
-
-	if (fc > 0) {
-		dc.w = TEXTW(before);
-		drawtext(before, dc.sel);
-		dc.x += dc.w;
-		width -= dc.w;
-	}
+	cc = wh / (tabheight * 2);
+
+  if ((fc = getfirsttab()) + cc < nclients) {
+      dc.y = tabheight * 2 * (cc - 1);
+      drawtext(after, dc.norm);
+      dc.y += tabheight;
+      drawtext(after, dc.norm);
+      cc -= 1;
+      dc.y = 0;
+  }
+  if (fc > 0) {
+    dc.y = 0;
+    drawtext(before, dc.norm);
+    dc.y += tabheight;
+    drawtext(before, dc.norm);
+    dc.y += tabheight;
+    cc -= 1;
+   }
 
-	cc = MIN(cc, nclients);
 	for (c = fc; c < fc + cc; c++) {
-		dc.w = width / cc;
-		if (c == sel) {
-			col = dc.sel;
-			dc.w += width % cc;
-		} else {
-			col = clients[c]->urgent ? dc.urg : dc.norm;
-		}
-		drawtext(clients[c]->name, col);
-		dc.x += dc.w;
-		clients[c]->tabx = dc.x;
+		if (c < nclients){
+      if (c == sel) {
+	  		col = dc.sel;
+	  	} else {
+	  		col = clients[c]->urgent ? dc.urg : dc.norm;
+	  	}
+      char delimiter[] = "|";
+      char name[250];
+      strcpy(name, clients[c]->name);
+      char *text_line = strtok(name, delimiter);
+      drawtext(text_line, col);
+      text_line = strtok(NULL, delimiter);
+      dc.y += tabheight;
+	  	drawtext(text_line, col);
+    } else {
+      drawtext("", dc.norm);
+      dc.y += tabheight;
+      drawtext("", dc.norm);
+    }
+    dc.y += tabheight;
 	}
-	XCopyArea(dpy, dc.drawable, win, dc.gc, 0, 0, ww, bh, 0, 0);
+	XCopyArea(dpy, dc.drawable, win, dc.gc, 0, 0, tabwidth, wh, 0, 0);
 	XSync(dpy, False);
 }
 
@@ -463,7 +473,7 @@ focus(int c)
 	if (c < 0 || c >= nclients)
 		return;
 
-	resize(c, ww, wh - bh);
+	resize(c, ww-tabwidth, wh);
 	XRaiseWindow(dpy, clients[c]->win);
 	XSetInputFocus(dpy, clients[c]->win, RevertToParent, CurrentTime);
 	sendxembed(c, XEMBED_FOCUS_IN, XEMBED_FOCUS_CURRENT, 0, 0);
@@ -589,9 +599,7 @@ getfirsttab(void)
 	if (sel < 0)
 		return 0;
 
-	cc = ww / tabwidth;
-	if (nclients > cc)
-		cc = (ww - TEXTW(before) - TEXTW(after)) / tabwidth;
+	cc = wh / tabheight;
 
 	ret = sel - cc / 2 + (cc + 1) % 2;
 	return ret < 0 ? 0 :
@@ -708,7 +716,7 @@ manage(Window w)
 		XEvent e;
 
 		XWithdrawWindow(dpy, w, 0);
-		XReparentWindow(dpy, w, win, 0, bh);
+		XReparentWindow(dpy, w, win, tabwidth, 0);
 		XSelectInput(dpy, w, PropertyChangeMask |
 		             StructureNotifyMask | EnterWindowMask);
 		XSync(dpy, False);
@@ -880,8 +888,8 @@ resize(int c, int w, int h)
 	XConfigureEvent ce;
 	XWindowChanges wc;
 
-	ce.x = 0;
-	ce.y = wc.y = bh;
+	ce.x = tabwidth;
+	ce.y = wc.y = 0;
 	ce.width = wc.width = w;
 	ce.height = wc.height = h;
 	ce.type = ConfigureNotify;
@@ -984,7 +992,7 @@ setup(void)
 	screen = DefaultScreen(dpy);
 	root = RootWindow(dpy, screen);
 	initfont(font);
-	bh = dc.h = dc.font.height + 2;
+	bh = dc.h = tabheight;
 
 	/* init atoms */
 	wmatom[WMDelete] = XInternAtom(dpy, "WM_DELETE_WINDOW", False);
@@ -999,8 +1007,8 @@ setup(void)
 	/* init appearance */
 	wx = 0;
 	wy = 0;
-	ww = 800;
-	wh = 600;
+	ww = 1920;
+	wh = 1080;
 	isfixed = 0;
 
 	if (geometry) {
@@ -1219,7 +1227,7 @@ updatetitle(int c)
 		            sizeof(clients[c]->name));
 	if (sel == c)
 		xsettitle(win, clients[c]->name);
-	drawbar();
+  drawbar();
 }
 
 /* There's no way to check accesses to destroyed windows, thus those cases are
-- 
2.31.1

