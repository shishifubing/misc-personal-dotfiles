" packages
" [[[
filetype plugin indent on " not really sure if needed for packpath
set packpath=${HOME}/dot-files/vim " path to plugins
:helptags ALL
" ]]]

" indent and spaces
" [[[

set tabstop=2 " tab = n spaces
set softtabstop=2 " when removing expanded tabs, remove n spaces
set shiftwidth=2 " no idea
set textwidth=72 " pep8 standard
set autoindent " allows you to indent each line the same as the previous one
set expandtab " replaces tabs with spaces
set nowrap " do not wrap lines

" ]]]

" search
" [[[

set ignorecase " ignore case when searching
set incsearch " search as characters are entered
set hlsearch " highlight all matches

" ]]]

set number " line nubmber
syntax on " displays the source code in different colors to enhance its readability
syntax enable " enable syntax processing
colorscheme theme_vim " colorscheme
set cursorline " highlights a line the cursor in on. alternative - nocursorline
set showmatch " matching parenthesis
set showcmd " show command at the bottom
set ignorecase " ignore case when searching
set notitle " do not change window title while editing
set ruler " display the cursor’s current position
set statusline+=p " theoretically adds full filename to the statusline, does not work
set sidescroll=1 " defolt horizontal scroll is half a screen, not very convenient

" backup. The // means that the directory information will be saved in the filename
" [[[

set backupdir=/tmp// " a backup file — the version of the file before your edited it
set directory=/tmp// " a swap file, containing the unsaved changes.
set undodir=/tmp// " an undo file, containing the undo trees of the file edited
set undofile " turn on undo files. It's needed to undo changes past writing into the file

" ]]]

" bindings
" noremap instead of map since it's not recursive and in general better practice
" [[[

" copy and to the clipboard instead of the usual vim buffer
" for windows the * register is needed
noremap y "+y
noremap d "+d
noremap p p=`] " correctly indent pasted text
" mm - set mark m. gg - move the cursor to the beginning of the file
" gq - format paragraph. G - end of the file. `m - move to the mark m
noremap <c-s> :w <return> mmggVGgq`m :w <return>
" changes indentation of the selected block
" you could use . (dot) to repeat the last indent
vnoremap > >gv
vnoremap < <gv

" ]]]

" autoactions
" [[[

" use the gq command to format the selection. gg g q G to format the entire file
autocmd BufNewFile,BufRead *.py set formatprg=autopep8\ --aggressive\ --aggressive\ --indent-size=2\ %
"another approarch, works like garbage: autocmd FileType py setlocal equalprg=autopep8\ --aggressive\ --indent-size=2\ %
autocmd BufNewFile,BufRead *.sh,*.bashrc set formatprg=shfmt\ -i\ 2\ %
autocmd BufNewFile,BufRead *.json set formatprg=python\ -m\ json.tool

" ]]]

" NERDTree
" [[[

let NERDTreeMinimalUI=1 " removes press help message from the top
" start NERDTree and put the cursor back in the other window.
autocmd VimEnter * NERDTree | wincmd p
" if another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
" open the existing NERDTree on each new tab.
autocmd BufWinEnter * silent NERDTreeMirror

" ]]]

" commands
" [[[

command Sh !shellcheck %

" ]]]

