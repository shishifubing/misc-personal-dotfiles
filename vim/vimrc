" general stuff


set packpath=${HOME}/dot-files/vim "path to plugins
set notitle " do not change window title while editing
set number " line nubmber
set cursorline " highlights a line the cursor in on. alternative - nocursorline
set sidescroll=1 " changes horizontal scroll to 1 column
set mouse=a " enable mouse presses: switching focus, resizing, etc

" ]]]

" color
" [[[

if !exists("g:syntax_on")
    syntax enable " enable syntax highlighting. If block is needed to not override
endif
colorscheme theme_vim " colorscheme
let g:colors_name='theme_vim' " colorscheme
set showmatch " matching parenthesis

" ]]]

" indent and spaces
" [[[

set tabstop=4 " tab = n spaces
set softtabstop=4 " when removing expanded tabs, remove n spaces
set shiftwidth=4 " no idea
set textwidth=72 " pep8 standard
set autoindent " allows you to indent each line the same as the previous one
set expandtab " replaces tabs with spaces
set nowrap " do not wrap lines

" ]]]

" search
" [[[

set ignorecase " ignore case when searching
set incsearch " search as characters are entered
set hlsearch " highlight all matches

" ]]]

" status and command lines
" [[[

set showcmd " show command line
set laststatus=2 " command line is always enabled

set statusline=                 " reset status line
set statusline+=%R%H%W%Y        " flags: readonly, help, preview, filetype
set statusline+=\ \[%n]         " buffer number
set statusline+=\ \[%F]         " path to the file
set statusline+=\ \[%l+%c/%L]   " current column + line / amount of lines
set statusline+=\ \[%b]         " ASCII of the symbol under the cursor

" ]]]

" backup. The // means that the directory information will be saved in the filename
" [[[

set backupdir=/tmp// " a backup file â€” the version of the file before your edited it
set directory=/tmp// " a swap file, containing the unsaved changes.
set undodir=/tmp// " an undo file, containing the undo trees of the file edited
set undofile " turn on undo files. It's needed to undo changes past writing into the file

" ]]]

" bindings
" noremap instead of map since it's not recursive and in general better practice
" [[[

" copy and to the clipboard instead of the usual vim buffer
" for windows the * register is needed
noremap y "+y
noremap d "+d
" correctly indent pasted text
noremap p p=`]
" changes indentation of the selected block
" you can use . (dot) to repeat the last indent
vnoremap > >gv
vnoremap < <gv

" ]]]

" formatting
" https://github.com/chiel92/vim-autoformat
" [[[

" mm - set mark m. gg - move the cursor to the beginning of the file
" gq - format paragraph. G - end of the file. `m - move to the mark m
"noremap <c-s> :w <return> mmggVGgq`m :w <return>
nnoremap <C-s> :w<CR>


augroup formatting

    autocmd BufWrite * :Autoformat

augroup END

" ]]]

" NERDTree
" https://github.com/preservim/nerdtree
" [[[

let NERDTreeMinimalUI=1 " remove press help message from the top
let NERDTreeWinPos="left" " position
let NERDTreeWinSize=25
let NERDTreeDirArrowExpandable="" " arrow folded
let NERDTreeDirArrowCollapsible="" " arrow expandedd

augroup nerdtree

    "autocmd VimEnter * NERDTree
    " if another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
    autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
                \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
    " open the existing NERDTree on each new tab.
    autocmd BufWinEnter * silent NERDTreeMirror

augroup END
" ]]]

" tagbar
" https://github.com/preservim/tagbar
" [[[

let g:tagbar_autoshowtag = 1 " Make panel vertical and place on the right
let g:tagbar_position = 'botright vertical' " Mapping to open and close the panel
let g:tagbar_autoclose=0 " do not autoclose when jumping to tags
let g:tagbar_autofocus=0 " do not autofocus tagbar window

" ]]]

" buffer
" https://github.com/jeetsukumaran/vim-buffergator
" [[[

let g:miniBufExplVSplit=0   " if value, then it is width, if 0 - split horizontally
let g:miniBufExplBRSplit=0   " Put new window on the top
let g:miniBufExplorerAutoStart=0 " autostart
let g:miniBufExplBuffersNeeded=1 " start as soon as normal buffer is available
let g:miniBufExplSplitToEdge=1 " force splitting at edge of the screen

noremap <c-PageUp> :bprev <cr>
noremap <c-PageDown> :bnext <cr>

" resize buffergator according to the number of buffers
"augroup buffergator

"    autocmd BufAdd,BufDelete,BufWrite,BufHidden * execute('2res' . len(split(execute('ls'), "[\n\r]")))

"augroup END
" ]]]


" layout
" https://github.com/paroxayte/vwm.vim
" [[[

"let g:vwm#eager_render=1 " redraw after layout opening. may increase the smoothness of layout population
"if !exists('g:vwm#layouts')
"    let g:vwm#layouts = [{
"                \  'name': 'custom_layout',
"                \  'left': {
"                    \    'v_sz': 25,
"                    \    'init': ['NERDTree'],
"                    \    'top': {
"                        \      'h_sz': 0,
"                        \      'init': ["MBEOpen"],
"                        \    }
"                        \  },
"                        \  'right': {
"                            \    'v_sz': 25,
"                            \    'init': ['TagbarOpen','wincmd p']
"                            \  }
"                            \}]
"endif
"command Layout execute('VwmOpen custom_layout')

"augroup layout

"    autocmd VimEnter * VwmOpen custom_layout

"augroup END

" ]]]

" ctrlsg - search
" https://github.com/dyng/ctrlsf.vim
" [[[

" Use the ack tool as the backend
let g:ctrlsf_backend = 'ack' " Auto close the results panel when opening a file
let g:ctrlsf_auto_close = { "normal":0, "compact":0 } " Immediately switch focus to the search window
let g:ctrlsf_auto_focus = { "at":"start" } " Don't open the preview window automatically
let g:ctrlsf_auto_preview = 0 " Use the smart case sensitivity search scheme
let g:ctrlsf_case_sensitive = 'smart' " Normal mode, not compact mode
let g:ctrlsf_default_view = 'normal' " Use absoulte search by default
let g:ctrlsf_regex_pattern = 0 " Position of the search window
let g:ctrlsf_position = 'right' " Width or height of search window
let g:ctrlsf_winsize = '46' " Search from the current working directory
let g:ctrlsf_default_root = 'cwd'

"It is also strongly recommended that you set up some mappings that enable you to search quickly:

" (Ctrl+F) Open search prompt (Normal Mode)
nmap <C-F>f <Plug>CtrlSFPrompt " (Ctrl-F + f) Open search prompt with selection (Visual Mode)
xmap <C-F>f <Plug>CtrlSFVwordPath " (Ctrl-F + F) Perform search with selection (Visual Mode)
xmap <C-F>F <Plug>CtrlSFVwordExec " (Ctrl-F + n) Open search prompt with current word (Normal Mode)
nmap <C-F>n <Plug>CtrlSFCwordPath " (Ctrl-F + o )Open CtrlSF window (Normal Mode)
nnoremap <C-F>o :CtrlSFOpen<CR> " (Ctrl-F + t) Toggle CtrlSF window (Normal Mode)
nnoremap <C-F>t :CtrlSFToggle<CR> " (Ctrl-F + t) Toggle CtrlSF window (Insert Mode)
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

" ]]]

" commands
" [[[

" shellcheck
command Sh !shellcheck %
" source stuff
command Svim :w | source ${HOME}/.vimrc
command Stags helptags ALL

" ]]]

